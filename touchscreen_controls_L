#!/usr/bin/env python
# ---------------------------------------------------------------------------
# Touchscreen controller
#
#  This program emulates keyboard key presses using a touchscreen.
#
# ---------------------------------------------------------------------------

import pygtk
pygtk.require('2.0')
import gtk
import time
import sys
import os
import argparse

from Xlib.X import NONE
from Xlib.XK import string_to_keysym
from Xlib.display import Display
from Xlib.protocol import event

parser = argparse.ArgumentParser()

parser.add_argument('--version', action='version',
                    version='%(prog)s 0.2')

parser.add_argument('--card', action='store',
                    dest='card',
                    help='set the soundcard in use')

results = parser.parse_args()
print('Left buttons: soundcard is set to = {!r}'.format(results.card))

def fake_press_key(key_to_press):

    os.system("wmctrl -a xwax")
    display = Display()
    focus_window = display.get_input_focus().focus
    keycode = display.keysym_to_keycode(string_to_keysym(key_to_press))

    key_event = event.KeyPress(
            time=int(time.time()),
            root=display.screen().root,
            window=focus_window,
            same_screen=0, child=NONE,
            root_x=0, root_y=0, event_x=0, event_y=0,
            state=0,
            detail=keycode
    )

    focus_window.send_event(key_event)

    display.sync()


def fake_release_key(key_to_press):

    os.system("wmctrl -a xwax")
    display = Display()
    focus_window = display.get_input_focus().focus
    keycode = display.keysym_to_keycode(string_to_keysym(key_to_press))


    key_event = event.KeyRelease(
            time=int(time.time()),
            root=display.screen().root,
            window=focus_window,
            same_screen=0, child=NONE,
            root_x=0, root_y=0, event_x=0, event_y=0,
            state=0,
            detail=keycode
    )

    focus_window.send_event(key_event)

    display.sync()

    os.system("wmctrl -a touchscreen")

def load_button(event):
    fake_press_key("F1")
    fake_release_key("F1")

def cue_button(event):
    fake_press_key("F2")
    fake_release_key("F2")

def timecode_button(event):
    fake_press_key("F3")
    fake_release_key("F3")

def audioinjector_bypass_button(widget, data):
    if widget.get_active():
       os.system("amixer sset 'Output Mixer HiFi' off")
       os.system("amixer cset name='Line Capture Switch' 0")
       os.system("amixer sset 'Output Mixer Line Bypass' on")
    else:
       os.system("amixer sset 'Output Mixer Line Bypass' off")
       os.system("amixer cset name='Line Capture Switch' 1")
       os.system("amixer sset 'Output Mixer HiFi' on")

def traktora6_phono_button(widget, data):
    if widget.get_active():
       os.system("amixer -c T6 cset numid=3 on")
    else:
       os.system("amixer -c T6 cset numid=3 off")

def traktora6_bypass_button(widget, data):
    if widget.get_active():
       os.system("amixer -c T6 cset numid=1 on")
    else:
       os.system("amixer -c T6 cset numid=1 off")

def sort_button(event):
    fake_press_key("Shift_L")
    fake_release_key("Shift_L")

def rescan_button(event):
    fake_press_key("Right")
    fake_press_key("Control_L")
    fake_release_key("Right")
    fake_release_key("Control_L")

def on_key_press_event(widget, event):
    keyname = gtk.gdk.keyval_name(event.keyval)
    if keyname == "F10":
        os.system("lxterminal &")

def make_window():
    win = gtk.Window()
    win.set_title("Touchscreen Controls")
    win.set_decorated(False)
    win.set_default_size(50, 480)
    win.move(0, 0)
    win.add_events(gtk.gdk.KEY_PRESS_MASK)
    win.connect("key-press-event", on_key_press_event)
    win.connect("destroy", gtk.main_quit)

    box = gtk.VButtonBox()

    btn = gtk.Button("LOAD")
    btn.connect("pressed", load_button)
    btn.set_size_request(50, 68)
    box.add(btn)

    btn = gtk.Button("CUE")
    btn.connect("pressed", cue_button)
    btn.set_size_request(50, 68)
    box.add(btn)

    btn = gtk.Button("TIMECD")
    btn.connect("pressed", timecode_button)
    btn.set_size_request(50, 68)
    box.add(btn)


    if results.card == 'audioinjector':
        btn = gtk.ToggleButton("BYPASS")
        map = btn.get_colormap()
        color = map.alloc_color("red")
        style = btn.get_style().copy()
        style.bg[gtk.STATE_ACTIVE] = color
        btn.set_style(style)
        btn.connect("toggled", audioinjector_bypass_button,"BYPASS")
        btn.set_size_request(50, 68)
        box.add(btn)

    elif results.card == 'traktora6':
        btn = gtk.ToggleButton("PHONO")
        map = btn.get_colormap()
        color = map.alloc_color("green")
        style = btn.get_style().copy()
        style.bg[gtk.STATE_ACTIVE] = color
        btn.set_style(style)
        btn.connect("toggled", traktora6_phono_button,"PHONO")
        btn.set_size_request(50, 68)
        box.add(btn)

        btn = gtk.ToggleButton("BYPASS")
        map = btn.get_colormap()
        color = map.alloc_color("red")
        style = btn.get_style().copy()
        style.bg[gtk.STATE_ACTIVE] = color
        btn.set_style(style)
        btn.connect("toggled", traktora6_bypass_button,"BYPASS")
        btn.set_size_request(50, 68)
        box.add(btn)

    if results.card == 'traktora6' or results.card == 'twindeck' or results.card == 'ranesl1':
        btn = gtk.Button("SORT")
        btn.connect("pressed", sort_button)
        btn.set_size_request(50, 68)
        box.add(btn)

        btn = gtk.Button("RESCAN")
        btn.connect("pressed", rescan_button)
        btn.set_size_request(50, 68)
        box.add(btn)

    win.add(box)

    win.show_all()

    gtk.main()

display = Display()
make_window()
